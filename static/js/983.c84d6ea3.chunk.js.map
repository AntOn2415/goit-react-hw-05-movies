{"version":3,"file":"static/js/983.c84d6ea3.chunk.js","mappings":"+LACA,EAA4B,kC,SC4B5B,EAzBsB,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACjBC,GAAWC,EAAAA,EAAAA,MACXC,EACkB,MAAtBF,EAASG,SAAT,kBAAuCJ,EAAMK,IAA7C,UAAuDL,EAAMK,IAC/D,OACE,yBACE,SAAC,KAAD,CACEC,GAAIH,EACJI,MAAO,CAAEC,KAAMP,GACfQ,UAAWC,EAHb,SAKGV,EAAMW,OAASX,EAAMY,QAI7B,EClBD,EAA4B,8BCsB5B,EAnBmB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpB,OACE,eAAIJ,UAAWC,EAAf,SACGG,EAAOC,KAAI,SAAAd,GAAK,OACf,SAAC,EAAD,CAA8BA,MAAOA,GAAjBA,EAAMK,GADX,KAKtB,C,yHC0BD,UAjCiB,WACf,OAA4BU,EAAAA,EAAAA,UAAS,IAArC,eAAOF,EAAP,KAAeG,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAEiCC,EAAAA,EAAAA,MAFjC,OAEUC,EAFV,OAGIL,EAAUK,GAHd,sDAKU,IAAIC,MAAM,mCALpB,yBAOIJ,GAAa,GAPjB,6EADc,uBAAC,WAAD,wBAYdK,EACD,GAAE,KAGD,8BACGN,GACC,SAAC,IAAD,KAEA,4BACE,eAAIR,UAAU,QAAd,SAAsB,oBACtB,SAAC,IAAD,CAAYI,OAAQA,QAK7B,C,wLCnBD,E,QALsBW,EAAAA,OAAa,CACjCC,QAXe,gCAYfC,QATS,CACPC,OAAQ,mBACRC,cACE,gO,SCNSR,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,6GAE2BS,EAAAA,IAAkB,mCAF7C,cAEUC,EAFV,yBAGWA,EAASC,KAAKC,SAHzB,oIASeC,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BC,GAA5B,gGAE2BL,EAAAA,IAAA,6BACCK,EADD,+CAF3B,cAEUJ,EAFV,yBAKWA,EAASC,KAAKC,SALzB,oIAWeG,EAAkB,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCC,GAAjC,gGAE2BP,EAAAA,IAAA,gBAA2BO,EAA3B,oBAF3B,cAEUN,EAFV,yBAGWA,EAASC,MAHpB,sCAMU,IAAIT,MAAJ,qDAAwDc,IANlE,yFAUeC,EAAkB,EAAlBA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCD,EAASE,GAA1C,gGAE2BT,EAAAA,IAAA,gBACZO,EADY,YACDE,EADC,2BAF3B,cAEUR,EAFV,yBAKWA,EAASC,MALpB,2HAWA,IAAMQ,EAAc,SAACC,GACnB,OAAKA,EACC,sCAAN,OAA6CA,GAD3B,IAEnB,C","sources":["webpack://goit-react-hw-05-movies/./src/components/MoviesListItem/MoviesListItem.module.css?7daa","components/MoviesListItem/MoviesListItem.jsx","webpack://goit-react-hw-05-movies/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx.jsx","pages/HomePage.jsx","service/ApiConfig.js","service/MoviesService.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movieLink\":\"MoviesListItem_movieLink__7wLUU\"};","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport css from './MoviesListItem.module.css';\n\nconst MovieListItem = ({ movie }) => {\n  const location = useLocation();\n  const moviePath =\n    location.pathname === '/' ? `/movies/${movie.id}` : `${movie.id}`;\n  return (\n    <li>\n      <Link\n        to={moviePath}\n        state={{ from: location }}\n        className={css.movieLink}\n      >\n        {movie.title || movie.name}\n      </Link>\n    </li>\n  );\n};\n\nMovieListItem.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    name: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieListItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"movieList\":\"MoviesList_movieList__8BnEE\"};","import PropTypes from 'prop-types';\nimport MovieListItem from '../MoviesListItem';\nimport css from './MoviesList.module.css';\n\nconst MoviesList = ({ movies }) => {\n  return (\n    <ul className={css.movieList}>\n      {movies.map(movie => (\n        <MovieListItem key={movie.id} movie={movie} />\n      ))}\n    </ul>\n  );\n};\n\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default MoviesList;\n","import React, { useEffect, useState } from 'react';\nimport { fetchTrendingMovies } from '../service/MoviesService';\nimport MoviesList from '../components/MoviesList';\nimport { Loader } from '../components/Loader/Loader';\n\nconst HomePage = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchMovies() {\n      try {\n        const trendingMovies = await fetchTrendingMovies();\n        setMovies(trendingMovies);\n      } catch (error) {\n        throw new Error('Failed to fetch trending movies');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchMovies();\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div>\n          <h1 className=\"title\">Trending today</h1>\n          <MoviesList movies={movies} />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default HomePage;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjOGFjODFjMzk0ODNkOGVmMmY5N2ZkNTBjNjA4NmQ1NyIsInN1YiI6IjY0OGYzM2NiYzNjODkxMDBhZTUxODllMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Sy6yeDv4hwTPYW8QyN_kvYlj0SfCrm-aR769hvjNTqI',\n  },\n};\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  headers: options.headers,\n});\n\nexport default axiosInstance;\n","import axiosInstance from './ApiConfig';\n\nasync function fetchTrendingMovies() {\n  try {\n    const response = await axiosInstance.get('trending/all/day?language=en-US');\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function searchMovies(query) {\n  try {\n    const response = await axiosInstance.get(\n      `search/movie?query=${query}&include_adult=false&language=en-US&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function fetchMovieDetails(movieId) {\n  try {\n    const response = await axiosInstance.get(`movie/${movieId}?language=en-US`);\n    return response.data;\n  } catch (error) {\n    \n    throw new Error(`Failed to fetch details for movie with ID: ${movieId}`);\n  }\n}\n\nasync function fetchMovieAddInfo(movieId, paramInfo) {\n  try {\n    const response = await axiosInstance.get(\n      `movie/${movieId}/${paramInfo}?language=en-US&page=1`\n    );\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nconst getImageUrl = (path) => {\n  if (!path) return null;\n  return `https://image.tmdb.org/t/p/original${path}`;\n};\n\nexport {\n  fetchTrendingMovies,\n  searchMovies,\n  fetchMovieDetails,\n  fetchMovieAddInfo,\n  getImageUrl\n};\n"],"names":["movie","location","useLocation","moviePath","pathname","id","to","state","from","className","css","title","name","movies","map","useState","setMovies","isLoading","setIsLoading","useEffect","fetchTrendingMovies","trendingMovies","Error","fetchMovies","axios","baseURL","headers","accept","Authorization","axiosInstance","response","data","results","searchMovies","query","fetchMovieDetails","movieId","fetchMovieAddInfo","paramInfo","getImageUrl","path"],"sourceRoot":""}