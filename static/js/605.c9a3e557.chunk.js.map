{"version":3,"file":"static/js/605.c9a3e557.chunk.js","mappings":"sQACA,EAA2B,uBAA3B,EAA0D,oBAA1D,EAA2F,yBAA3F,EAAgI,wBAAhI,EAAqK,yBAArK,EAA4M,0BAA5M,EAAkP,wBAAlP,EAAsR,wB,SCwDtR,EAnDa,WACX,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,mCAAG,oGAEpBF,GAAa,GAFO,UAGEG,EAAAA,EAAAA,IAAkBN,EAAS,WAH7B,OAGdO,EAHc,OAIpBR,EAAQQ,EAAQT,MAJI,oFAQpBK,GAAa,GARO,4EAAH,qDAYrBE,GACD,GAAE,CAACL,IAEAE,GACK,SAACM,EAAA,EAAD,KAIP,qBAASC,UAAWC,EAApB,WACE,eAAID,UAAWC,EAAf,SAA0B,UAC1B,eAAID,UAAWC,EAAf,SACGZ,EAAKa,KAAI,SAAAC,GAAK,OACb,gBAAmBH,UAAWC,EAA9B,UACGE,EAAMC,cACL,gBACEC,KAAKC,EAAAA,EAAAA,IAAYH,EAAMC,cACvBJ,UAAWC,EACXM,IAAKJ,EAAMK,QAGb,gBAAKR,UAAWC,EAAhB,SAAiC,cAEnC,cAAGD,UAAWC,EAAd,SAA8BE,EAAMK,OACnCL,EAAMM,YACL,eAAGT,UAAWC,EAAd,UAA6B,cAAYE,EAAMM,eAZ1CN,EAAMO,GADF,QAoBtB,C,wLCtCD,E,QALsBC,EAAAA,OAAa,CACjCC,QAXe,gCAYfC,QATS,CACPC,OAAQ,mBACRC,cACE,gO,SCNSC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,6GAE2BC,EAAAA,IAAkB,mCAF7C,cAEUC,EAFV,yBAGWA,EAASC,KAAKC,SAHzB,oIASeC,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BC,GAA5B,gGAE2BL,EAAAA,IAAA,6BACCK,EADD,+CAF3B,cAEUJ,EAFV,yBAKWA,EAASC,KAAKC,SALzB,oIAWeG,EAAkB,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiChC,GAAjC,gGAE2B0B,EAAAA,IAAA,gBAA2B1B,EAA3B,oBAF3B,cAEU2B,EAFV,yBAGWA,EAASC,MAHpB,sCAMU,IAAIK,MAAJ,qDAAwDjC,IANlE,yFAUeM,EAAkB,EAAlBA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCN,EAASkC,GAA1C,gGAE2BR,EAAAA,IAAA,gBACZ1B,EADY,YACDkC,EADC,2BAF3B,cAEUP,EAFV,yBAKWA,EAASC,MALpB,2HAWA,IAAMb,EAAc,SAACoB,GACnB,OAAKA,EACC,sCAAN,OAA6CA,GAD3B,IAEnB,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","service/ApiConfig.js","service/MoviesService.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castInfo\":\"Cast_castInfo__fGvyp\",\"title\":\"Cast_title__0cH9s\",\"actorsList\":\"Cast_actorsList__iEq99\",\"actorCard\":\"Cast_actorCard__1vCPH\",\"actorPhoto\":\"Cast_actorPhoto__kVLWr\",\"placeholder\":\"Cast_placeholder__oyDTA\",\"actorName\":\"Cast_actorName__XabVA\",\"actorRole\":\"Cast_actorRole__G5cZ9\"};","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieAddInfo, getImageUrl } from '../../service/MoviesService';\nimport { LoaderThreeDots } from 'components/Loader/Loader';\nimport css from './Cast.module.css';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const getMovieCredits = async () => {\n      try {\n        setIsLoading(true);\n        const credits = await fetchMovieAddInfo(movieId, \"credits\");\n        setCast(credits.cast);\n      } catch (error) {\n        throw error;\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovieCredits();\n  }, [movieId]);\n\n  if (isLoading) {\n    return <LoaderThreeDots />;\n  }\n\n  return (\n    <section className={css.castInfo}>\n      <h2 className={css.title}>Cast</h2>\n      <ul className={css.actorsList}>\n        {cast.map(actor => (\n          <li key={actor.id} className={css.actorCard}>\n            {actor.profile_path ? (\n              <img\n                src={getImageUrl(actor.profile_path)}\n                className={css.actorPhoto}\n                alt={actor.name}\n              />\n            ) : (\n              <div className={css.placeholder}>No Photo</div>\n            )}\n            <p className={css.actorName}>{actor.name}</p>\n            {actor.character && (\n              <p className={css.actorRole}>Character: {actor.character}</p>\n            )}\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjOGFjODFjMzk0ODNkOGVmMmY5N2ZkNTBjNjA4NmQ1NyIsInN1YiI6IjY0OGYzM2NiYzNjODkxMDBhZTUxODllMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Sy6yeDv4hwTPYW8QyN_kvYlj0SfCrm-aR769hvjNTqI',\n  },\n};\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  headers: options.headers,\n});\n\nexport default axiosInstance;\n","import axiosInstance from './ApiConfig';\n\nasync function fetchTrendingMovies() {\n  try {\n    const response = await axiosInstance.get('trending/all/day?language=en-US');\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function searchMovies(query) {\n  try {\n    const response = await axiosInstance.get(\n      `search/movie?query=${query}&include_adult=false&language=en-US&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function fetchMovieDetails(movieId) {\n  try {\n    const response = await axiosInstance.get(`movie/${movieId}?language=en-US`);\n    return response.data;\n  } catch (error) {\n    \n    throw new Error(`Failed to fetch details for movie with ID: ${movieId}`);\n  }\n}\n\nasync function fetchMovieAddInfo(movieId, paramInfo) {\n  try {\n    const response = await axiosInstance.get(\n      `movie/${movieId}/${paramInfo}?language=en-US&page=1`\n    );\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nconst getImageUrl = (path) => {\n  if (!path) return null;\n  return `https://image.tmdb.org/t/p/original${path}`;\n};\n\nexport {\n  fetchTrendingMovies,\n  searchMovies,\n  fetchMovieDetails,\n  fetchMovieAddInfo,\n  getImageUrl\n};\n"],"names":["useState","cast","setCast","movieId","useParams","isLoading","setIsLoading","useEffect","getMovieCredits","fetchMovieAddInfo","credits","Loader","className","css","map","actor","profile_path","src","getImageUrl","alt","name","character","id","axios","baseURL","headers","accept","Authorization","fetchTrendingMovies","axiosInstance","response","data","results","searchMovies","query","fetchMovieDetails","Error","paramInfo","path"],"sourceRoot":""}