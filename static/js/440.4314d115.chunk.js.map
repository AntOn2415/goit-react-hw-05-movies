{"version":3,"file":"static/js/440.4314d115.chunk.js","mappings":"sQACA,EAAmC,kCAAnC,EAA6E,uBAA7E,EAAiH,4BAAjH,EAA0J,4BAA1J,EAA+L,wBAA/L,EAAiO,yBAAjO,EAAyQ,8B,SCoDzQ,EA/CgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,mCAAG,8GAEGC,EAAAA,EAAAA,IAAkBT,EAAS,WAF9B,OAEdU,EAFc,OAGpBN,EAAWM,EAASC,SAHA,oFAOpBL,GAAa,GAPO,4EAAH,qDAWrBE,GACD,GAAE,CAACR,IAEAK,GACK,SAACO,EAAA,EAAD,KAIP,8BACE,iBAAKC,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,SAA0B,YACzBX,EAAQY,OAAS,GAChB,eAAIF,UAAWC,EAAf,SACGX,EAAQa,KAAI,SAAAC,GAAM,OACjB,gBAAoBJ,UAAWC,EAA/B,WACE,eAAGD,UAAWC,EAAd,UAA0B,WAASG,EAAOC,WAC1C,cAAGL,UAAWC,EAAd,SAA4BG,EAAOE,YAF5BF,EAAOG,GADC,OAQrB,gBAAKP,UAAWC,EAAhB,SAAkC,kDAO3C,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Reviews/Reviews.module.css?7248","components/Reviews/Reviews.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"reviewsContainer\":\"Reviews_reviewsContainer__bHfUv\",\"title\":\"Reviews_title__t265C\",\"reviewList\":\"Reviews_reviewList__uMBar\",\"reviewItem\":\"Reviews_reviewItem__ax7Fo\",\"author\":\"Reviews_author__CqYAZ\",\"content\":\"Reviews_content__13k0w\",\"emptyReviews\":\"Reviews_emptyReviews__VBf9c\"};","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieAddInfo } from '../../service/MoviesService';\nimport { LoaderThreeDots } from 'components/Loader/Loader';\nimport css from './Reviews.module.css';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const getMovieReviews = async () => {\n      try {\n        const response = await fetchMovieAddInfo(movieId, \"reviews\");\n        setReviews(response.results);\n      } catch (error) {\n        throw error;\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovieReviews();\n  }, [movieId]);\n\n  if (isLoading) {\n    return <LoaderThreeDots />;\n  }\n\n  return (\n    <section>\n      <div className={css.reviewsContainer}>\n        <h2 className={css.title}>Reviews</h2>\n        {reviews.length > 0 ? (\n          <ul className={css.reviewList}>\n            {reviews.map(review => (\n              <li key={review.id} className={css.reviewItem}>\n                <p className={css.author}>Author: {review.author}</p>\n                <p className={css.content}>{review.content}</p>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <div className={css.emptyReviews}>\n            We don't have any reviews for this movie.\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default Reviews;\n"],"names":["movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","useEffect","getMovieReviews","fetchMovieAddInfo","response","results","Loader","className","css","length","map","review","author","content","id"],"sourceRoot":""}