{"version":3,"file":"static/js/440.7045dc68.chunk.js","mappings":"sQACA,EAAmC,kCAAnC,EAA6E,uBAA7E,EAAiH,4BAAjH,EAA0J,4BAA1J,EAA+L,wBAA/L,EAAiO,yBAAjO,EAAyQ,8B,SCoDzQ,EA/CgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,mCAAG,8GAEGC,EAAAA,EAAAA,IAAkBT,EAAS,WAF9B,OAEdU,EAFc,OAGpBN,EAAWM,EAASC,SAHA,oFAOpBL,GAAa,GAPO,4EAAH,qDAWrBE,GACD,GAAE,CAACR,IAEAK,GACK,SAACO,EAAA,EAAD,KAIP,8BACE,iBAAKC,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,SAA0B,YACzBX,EAAQY,OAAS,GAChB,eAAIF,UAAWC,EAAf,SACGX,EAAQa,KAAI,SAAAC,GAAM,OACjB,gBAAoBJ,UAAWC,EAA/B,WACE,eAAGD,UAAWC,EAAd,UAA0B,WAASG,EAAOC,WAC1C,cAAGL,UAAWC,EAAd,SAA4BG,EAAOE,YAF5BF,EAAOG,GADC,OAQrB,gBAAKP,UAAWC,EAAhB,SAAkC,kDAO3C,C,wLClCD,E,QALsBO,EAAAA,OAAa,CACjCC,QAXe,gCAYfC,QATS,CACPC,OAAQ,mBACRC,cACE,gO,SCNSC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,6GAE2BC,EAAAA,IAAkB,mCAF7C,cAEUjB,EAFV,yBAGWA,EAASkB,KAAKjB,SAHzB,oIASekB,EAAa,GAAbA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BC,GAA5B,gGAE2BH,EAAAA,IAAA,6BACCG,EADD,+CAF3B,cAEUpB,EAFV,yBAKWA,EAASkB,KAAKjB,SALzB,oIAWeoB,EAAkB,GAAlBA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiC/B,GAAjC,gGAE2B2B,EAAAA,IAAA,gBAA2B3B,EAA3B,oBAF3B,cAEUU,EAFV,yBAGWA,EAASkB,MAHpB,sCAMU,IAAII,MAAJ,qDAAwDhC,IANlE,yFAUeS,EAAkB,EAAlBA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAiCT,EAASiC,GAA1C,gGAE2BN,EAAAA,IAAA,gBACZ3B,EADY,YACDiC,EADC,2BAF3B,cAEUvB,EAFV,yBAKWA,EAASkB,MALpB,2HAWA,IAAMM,EAAc,SAACC,GACnB,OAAKA,EACC,sCAAN,OAA6CA,GAD3B,IAEnB,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Reviews/Reviews.module.css?7248","components/Reviews/Reviews.jsx","service/ApiConfig.js","service/MoviesService.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"reviewsContainer\":\"Reviews_reviewsContainer__bHfUv\",\"title\":\"Reviews_title__t265C\",\"reviewList\":\"Reviews_reviewList__uMBar\",\"reviewItem\":\"Reviews_reviewItem__ax7Fo\",\"author\":\"Reviews_author__CqYAZ\",\"content\":\"Reviews_content__13k0w\",\"emptyReviews\":\"Reviews_emptyReviews__VBf9c\"};","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieAddInfo } from '../../service/MoviesService';\nimport { LoaderThreeDots } from 'components/Loader/Loader';\nimport css from './Reviews.module.css';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const getMovieReviews = async () => {\n      try {\n        const response = await fetchMovieAddInfo(movieId, \"reviews\");\n        setReviews(response.results);\n      } catch (error) {\n        throw error;\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getMovieReviews();\n  }, [movieId]);\n\n  if (isLoading) {\n    return <LoaderThreeDots />;\n  }\n\n  return (\n    <section>\n      <div className={css.reviewsContainer}>\n        <h2 className={css.title}>Reviews</h2>\n        {reviews.length > 0 ? (\n          <ul className={css.reviewList}>\n            {reviews.map(review => (\n              <li key={review.id} className={css.reviewItem}>\n                <p className={css.author}>Author: {review.author}</p>\n                <p className={css.content}>{review.content}</p>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <div className={css.emptyReviews}>\n            We don't have any reviews for this movie.\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjOGFjODFjMzk0ODNkOGVmMmY5N2ZkNTBjNjA4NmQ1NyIsInN1YiI6IjY0OGYzM2NiYzNjODkxMDBhZTUxODllMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.Sy6yeDv4hwTPYW8QyN_kvYlj0SfCrm-aR769hvjNTqI',\n  },\n};\n\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  headers: options.headers,\n});\n\nexport default axiosInstance;\n","import axiosInstance from './ApiConfig';\n\nasync function fetchTrendingMovies() {\n  try {\n    const response = await axiosInstance.get('trending/all/day?language=en-US');\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function searchMovies(query) {\n  try {\n    const response = await axiosInstance.get(\n      `search/movie?query=${query}&include_adult=false&language=en-US&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nasync function fetchMovieDetails(movieId) {\n  try {\n    const response = await axiosInstance.get(`movie/${movieId}?language=en-US`);\n    return response.data;\n  } catch (error) {\n    \n    throw new Error(`Failed to fetch details for movie with ID: ${movieId}`);\n  }\n}\n\nasync function fetchMovieAddInfo(movieId, paramInfo) {\n  try {\n    const response = await axiosInstance.get(\n      `movie/${movieId}/${paramInfo}?language=en-US&page=1`\n    );\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nconst getImageUrl = (path) => {\n  if (!path) return null;\n  return `https://image.tmdb.org/t/p/original${path}`;\n};\n\nexport {\n  fetchTrendingMovies,\n  searchMovies,\n  fetchMovieDetails,\n  fetchMovieAddInfo,\n  getImageUrl\n};\n"],"names":["movieId","useParams","useState","reviews","setReviews","isLoading","setIsLoading","useEffect","getMovieReviews","fetchMovieAddInfo","response","results","Loader","className","css","length","map","review","author","content","id","axios","baseURL","headers","accept","Authorization","fetchTrendingMovies","axiosInstance","data","searchMovies","query","fetchMovieDetails","Error","paramInfo","getImageUrl","path"],"sourceRoot":""}